// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: market/service.proto

package market

import (
	common "protobuf/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Market_Sell_FullMethodName           = "/market.Market/Sell"
	Market_Buy_FullMethodName            = "/market.Market/Buy"
	Market_GetOffers_FullMethodName      = "/market.Market/GetOffers"
	Market_RemoveFromSell_FullMethodName = "/market.Market/RemoveFromSell"
)

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	// add offer in db
	Sell(ctx context.Context, in *OfferCreate, opts ...grpc.CallOption) (*common.Response, error)
	// delete offer from db, query to service Commands for change owner
	Buy(ctx context.Context, in *TypeName, opts ...grpc.CallOption) (*common.Response, error)
	// return all offers from db
	GetOffers(ctx context.Context, in *OffersSorting, opts ...grpc.CallOption) (*OffersFailure, error)
	// delete offer from db
	RemoveFromSell(ctx context.Context, in *TypeName, opts ...grpc.CallOption) (*common.Response, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) Sell(ctx context.Context, in *OfferCreate, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Market_Sell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) Buy(ctx context.Context, in *TypeName, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Market_Buy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetOffers(ctx context.Context, in *OffersSorting, opts ...grpc.CallOption) (*OffersFailure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OffersFailure)
	err := c.cc.Invoke(ctx, Market_GetOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) RemoveFromSell(ctx context.Context, in *TypeName, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Market_RemoveFromSell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility.
type MarketServer interface {
	// add offer in db
	Sell(context.Context, *OfferCreate) (*common.Response, error)
	// delete offer from db, query to service Commands for change owner
	Buy(context.Context, *TypeName) (*common.Response, error)
	// return all offers from db
	GetOffers(context.Context, *OffersSorting) (*OffersFailure, error)
	// delete offer from db
	RemoveFromSell(context.Context, *TypeName) (*common.Response, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketServer struct{}

func (UnimplementedMarketServer) Sell(context.Context, *OfferCreate) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sell not implemented")
}
func (UnimplementedMarketServer) Buy(context.Context, *TypeName) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedMarketServer) GetOffers(context.Context, *OffersSorting) (*OffersFailure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffers not implemented")
}
func (UnimplementedMarketServer) RemoveFromSell(context.Context, *TypeName) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromSell not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}
func (UnimplementedMarketServer) testEmbeddedByValue()                {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	// If the following call pancis, it indicates UnimplementedMarketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_Sell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).Sell(ctx, req.(*OfferCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_Buy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).Buy(ctx, req.(*TypeName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffersSorting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_GetOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetOffers(ctx, req.(*OffersSorting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_RemoveFromSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).RemoveFromSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_RemoveFromSell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).RemoveFromSell(ctx, req.(*TypeName))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sell",
			Handler:    _Market_Sell_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _Market_Buy_Handler,
		},
		{
			MethodName: "GetOffers",
			Handler:    _Market_GetOffers_Handler,
		},
		{
			MethodName: "RemoveFromSell",
			Handler:    _Market_RemoveFromSell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/service.proto",
}
