syntax = "proto3";

package warns;

import "common/types.proto";
import "users/service.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./warns"; // для компилятора Go

service Warns {
    // Insert active warn in table Warns
    rpc Warn(WarnCreate) returns (WarnFailure);

    // Make all warns for this user inactive
    rpc AllUnWarn(users.Id) returns (common.Response);

    // Make last warn for this user inactive
    rpc LastUnWarn(users.Id) returns (common.Response);

    // Make all warns for this user inactive, insert active ban in table Bans, set role banned
    rpc Ban(BanCreate) returns (BanFailure);

    // Make ban for this user inactive, set role user
    rpc Unban(users.Id) returns (common.Response);

    // Get all warns (inactiv and activ) from Warns by user id
    rpc GetHistoryWarns(users.Id) returns (AllWarnsFailure);

    // Get all bans (inactiv and activ) from Bans by user id
    rpc GetHistoryBans(users.Id) returns (AllBansFailure);

    // Get active warns for this user
    rpc GetActiveWarns(users.Id) returns (AllWarnsFailure);

    // Get active ban for this user
    rpc GetActiveBan(users.Id) returns (BanFailure);

    // Get count of active warns for this user
    rpc GetCountOfActiveWarns(users.Id) returns (CountOfActiveWarns);
}

message Warn {
    int64 Id = 1;
    int64 UserId = 2;
    int64 ModerId = 3;
    string Reason = 4;
    google.protobuf.Timestamp IssuedAt = 5;
    bool IsActive = 6;
}

message WarnFailure {
    optional Warn warn = 1;
    optional common.Failure failure = 2;
}

message AllWarns {
    repeated Warn warns = 1;
}

message AllWarnsFailure {
    optional AllWarns warns = 1;
    optional common.Response failure = 2;
}

message WarnCreate {
    int64 UserId = 1;
    int64 ModerId = 2;
    optional string Reason = 3;
}

message Ban {
    int64 Id = 1;
    int64 UserId = 2;
    int64 ModerId = 3;
    string Reason = 4;
    google.protobuf.Timestamp IssuedAt = 5;
    bool IsActive = 6;
}

message BanFailure {
    optional Ban ban =1 ;
    optional common.Failure failure = 2;
}

message AllBans {
    repeated Ban bans = 1;
}

message AllBansFailure {
    optional AllBans bans = 1;
    optional common.Response failure = 2;
}

message BanCreate {
    int64 UserId = 1;
    int64 ModerId = 2;
    optional string Reason = 3;
}

message CountOfActiveWarns {
    int32 countWarns = 1;
    optional common.Resonse failure = 2;
}
